(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{285:function(t,e,i){"use strict";i.r(e),e.default=[{title:"实训笔记以及操作步骤",path:"/posts/2.html",strippedContent:" # 实训笔记以及操作步骤    # 2019年12月23 日 13:50    1.安装  \tnode.js  2.安装  \ttypora  3安装\tjquery  4注册\tgithub  5学习\tgithub菜鸟教程  网站\thttps://www.runoob.com/git/git-tutorial.html  ctrl+/   查看源码  ctrl+n   新建一个文本网页  有序是  1 . 空格  无需是  *   空格  代码敲完后必须按 空格  保存文件后缀名必须是md：    # 2019年12月24日 13:50      1.安装     git  2创建一个存储库名称  3创建一个文件夹,在文件夹里面鼠标右级打开git bash here  4 输入 git clone 加 存储库名称   5输入 git status \t（粘贴别人地址）  6输入 git add .\t（检查状态）  7输入 git commit -m'随便写什么'\t（提交版本库）  8输入 git push (上传)    # 2019年12月25日 13:50    1.c盘 输入cmd  2.在里面输入npm -v  3打开淘宝nom镜像 找到使用说明npm install -g cnpm --registry=https://registry.npm.taobao.org  4刷出来以后 打cnpm -v  5在输入一个 cnpm install -g @vue/cli  6 输入一个 vue -V  7输入一个 cnpm i -g vuepress  8百度  vuepress  9创建工作文件夹 命名必须是README.md英文  10创建 文本文档 命名 md  11cmd命令打开文件夹  12输入vuepress dev .  13 粘贴网站名字 打开他就ok了。    # 2019年12月26日 13:50    1.桌面创建一个文件夹命名为vue press  2.进入后点右件git bash here  3.百度 liujiaozhu666GitHub.io  4.找到 indigo material点击  5.找到使用模板分支   复制下载分支的命令  6.出来一个文件夹后进入文件夹  7进入文件夹后 点击init.sh  8.再次运行在文件夹输入cmd在里面输入 npm run dev  9.如果代码出错删除no什么，在次点击cmd在他里面输入cnpm 空格 i  9.完成后复制网站名称，在网页打开他  10.将文件夹拖到软件中开始编辑    # 2019年12月27日 13:50    1.在文件夹vue press中找到posts文件夹  2.找到posts文件夹后在里面创建一个文本文档后缀名必须是md  3.在md文本文档中输入：  title: （标题）  date: （时间，日期）  ags:  [标题]  4.在文件夹中输入cmd，cmd中输入npm run dev  5.复制链接在浏览器中打开  6.在百度上输入github进入官网找到克隆或下载复制链接  7.在软件中修改第一行 前面加一个#，然后把后两行代码删除，在修改链接  8.在文件夹cmd输入 npm run build ,完成  9.双击文件夹中 deploy.sh  10.打开github官网看是否上传成功"},{title:"html笔记",path:"/posts/html.html",strippedContent:" ​\tHTML 简介     # HTML介绍    超文本标记语言（Hyper Text Markup Language），缩写为HTML，标准[通用标记语言](https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=68713543&ss_c=ssc.citiao.link)下的一个应用。HTML不是一种编程语言，而是一种标记语言 （markup language），是网页制作所必备的工具。“[超文本](https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=42705&ss_c=ssc.citiao.link)”就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。    超文本标记语言(或超文本标签语言)的结构包括“头”部分和“主体”部分，其中“头”部提供关于网页的信息，“主体”部分提供网页的具体内容。    # 什么是html？    HTML 是用来描述网页的一种语言。    - HTML 指的是超文本标记语言 (**H**yper **T**ext **M**arkup **L**anguage)  - HTML 不是一种编程语言，而是一种*标记语言* (markup language)  - 标记语言是一套*标记标签* (markup tag)  - HTML 使用*标记标签*来描述网页    # html语言特点    1. 简易性：超级文本标记语言 版本升级采用 超集方式，从而更加灵活方便。    2. 可扩展性：超级文本标记语言的广泛应用带来了加强功能，增加 标识符等要求，超级文本标记语言采取子类元素的方式，为系统扩展带来保证。    3. 平台无关性：虽然 个人计算机大行其道，但使用 MAC等其他机器的大有人在，超级文本标记语言可以使用在广泛的平台上，这也是 万维网（ WWW）盛行的另一个原因。    4. 通用性：另外， HTML是网络的通用语言,一种简单、通用的全置标记语言。它允许网页制作人建立文本与图片相结合的复杂页面，这些页面可以被网上任何其他人浏览到，无论使用的是什么类型的电脑或浏览器。       # html标签       HTML 标记标签通常被称为 HTML 标签 (HTML tag)。       - HTML 标签是由*尖括号*包围的关键词，比如 <html>     - HTML 标签通常是*成对出现*的，比如 <b> 和 </b>     - 标签对中的第一个标签是*开始标签*，第二个标签是*结束标签*     - 开始和结束标签也被称为*开放标签*和*闭合标签*    # html结构性定义    ​\t\t文件类型 <HTML></HTML> （放在档案的开头与结尾）  　　  　　文件主题 <TITLE></TITLE> （必须放在「文头」区块内）  　　  　　文头 <HEAD></HEAD> （描述性资料，像是「主题」）  　　  　　文体 <BODY></BODY> （文件本体）    ​\t\t标题 <H?></H?> （从1到6，有六层选择）    ​\t\t标题的对齐 <H? ALIGN=LEFT|CENTER|RIGHT></H?>    ​\t\t区分 <DIV></DIV>    ​\t\t区分的对齐 <DIV ALIGN=LEFT|RIGHT|CENTER|JUSTIFY></DIV>    　　引文区块 <BLOCKQUOTE></BLOCKQUOTE> （通常会内缩）    \t\t强调 <EM></EM> （通常会以斜体显示）    　　特别强调 <STRONG></STRONG> （通常会以加粗显示）  　　  　　引文 <CITE></CITE> （通常会以斜体显示）  　　  　　码 <CODE></CODE> （显示原始码之用    ​\t\t样本 <SAMP></SAMP>　    　　键盘输入 <KBD></KBD>　    　　变数 <VAR></VAR>　　    　　定义 <DFN></DFN> （有些浏览器不提供）　　    　　地址 <ADDRESS></ADDRESS>　    　　大字 <BIG></BIG>　　　    　\t小字 <SMALL></SMALL>    # 外观相关的标签    ​\t\t\t加粗 <B></B>    ​\t\t\t斜体 <I></I>　    　　　底线 <U></U>尚有些浏览器不提供）    　　　删除线 <S></S> （尚有些浏览器不提供）    　　　下标 <SUB></SUB>    　　　上标 <SUP></SUP>　　    　　\t打字机体 <TT></TT> （用单空格字型显示）　　    　　\t预定格式 <PRE></PRE> （保留文件中空格的大小）    　　　预定格式的宽度 <PRE WIDTH=?></PRE>（以字元计算）　    　　　向中看齐 <CENTER></CENTER> （文字与图片都可以）    　　　闪耀 <BLINK></BLINK> （有史以来最被嘲弄的标签）    　　　字体大小 <FONT SIZE=?></FONT>（从1到7）    　　　改变字体大小 <FONT SIZE=+|-?></FONT>    　　　基本字体大小 <BASEFONT SIZE=?> （从1到7; 内定为3）　　"},{title:"css笔记",path:"/posts/css.html",strippedContent:" # CSS的概念及作用    CSS概念：层叠样式表    CSS作用：精确控制网页中的元素（文字、图片、音视频，超链接等）位置，颜色，大小，布局等。    ## 2、CSS的引用方式    # 行内样式    <p style=\"color:#249DF2; font-size: 50px; font-family:'微软雅黑' ;\"></p>  说明：style:样式,color:文字颜色 font-size:文字大小，font-family:字体 ;    # 内嵌样式    在head标签中，当前页面中都可以用     <style>    ​    p{    ​    color:#249DF2;    ​    font-size: 30px;    ​    font-family:'微软雅黑' ;    ​    }      </style>    # 外链样式    写在外部css文件中，当前项目中的所有页面都可以用    先在项目文件夹中创建名为：css的子文件夹    【Ctrl+N】,【Ctrl+S】,命名为：style.css，保存在css文件夹中    在style.css中输入    {    ​    color:#249DF2;    ​    font-size: 20px;    ​    font-family:'微软雅黑' ;    }    输入link按回车链接css。    三种引入方式的区别：应用范围不同。    # 文字颜色    color:red      颜色名表示法    color:#f00;    十六进制表示法（0-9 a-f）web常用    Color:rgb(255,0,0); rgb表示法    Color:rgba(255,0,0,1);rgba表示法,多设置透明度（0-1）    # 文字字体     font-family: \"微软雅黑\";      ## 文字大小     font-size: 20px; 单位一般为px像素    ## 文字粗细     font-weight: bold;  //加粗     font-weight: normal;//去除加粗    ## 行高     line-height:1.5; 1.5倍行高，用于段落文字          line-height:20px; 固定行高，用于一行文字    ## 首行缩进     text-indent: 2em;     ## 文字对齐     text-align: center; center 水平居中 left：居左 right:居右    ## 文本修饰    text-decoration:none;    去下划线    text-decoration:underline;  加下划线    text-decoration:line-through; 加删除线    #  标签选择器：    主要用于重置默认样式（共同的样式）    body{ }    p{ }     h1{}    # 美化盒子或图片    width : 宽    height : 高    margin : 0 auto; 让盒子水平居中    background: 背景    background:red url('img/1.jpg') no-repeat 10px 20px;    /* 颜色 背景图片路径 是否重复 水平位置 垂直位置 */    # Border：边框    说明：solid:实线 dashed:虚线 dotted：点划线     border:solid 10px #000;/*四周相同*/     Border-left:solid 10p border:solid 10px     Border-left:solid 10px #000;左#000;x #000;/*左*/     Border-right:solid 10px #000;/*右*/     Border-top:solid 10px #000;/*上*/     Border-bottom:solid 10px #000;/*下*/    # border-radius:边框圆角    border-radius:10px 0px 0px 10px;/*上右下左*/    实现圆形    ​\twidth: 100px;    ​    height: 100px;    ​    border-radius:100%;    # 美化盒子或图片（二）    ## float:浮动    Float:left;向左浮动    Float:right;向右浮动"},{title:"js笔记",path:"/posts/js.html",strippedContent:" # **JavaScript** **简介**    nJavaScript 诞生于 1995 年，主要是进行用户输入的合法性验证。    在 1995 年之前，Web 页面的一些验证工作都是由服务器端的语言来实现，这就要求用户输入的数据必须先通过网络传输到服务器端，服务器端进行相应的处理后，再将结果反馈给客户端    # **JavaScript** **的概念和执行原理**    nJavaScript 是一种轻型的、解释性的脚本语言，是一种由浏览器内的解释器执行的程序语言    n当客户端向服务器端请求页面时，服务器端将整个页面包含 JavaScript 的脚本代码发送到客户端，浏览器从上往下逐行读取并解析其中的 HTML 或脚本代码    # **JavaScript** **脚本代码的位置**    n通常可以在 3 个地方编写 JavaScript 的脚本代码：    n<script><\/script> 标签中直接编写脚本程序代码    n脚本程序代码放置在一个单独的文件中，然后在网页文件中引用这个脚本程序文件    n将脚本程序代码作为某个 HTML 页面元素的事件属性值或超链接的 href 属性值    # JavaScript **脚本代码的位置**    nHTML 代码嵌入方式    n将脚本程序代码作为某个 HTML 页面元素的事件属性值或超链接的 href 属性值    <body>      <a href=\"javascript:document.write('<h2> 欢迎来到 JavaScript 课堂 </h2>');\">hello</a>    </body>    # **JavaScript** **函数与事件**    nJavaScript中有五种简单数据类型。    n运算符有算术运算符、赋值运算符、比较运算符和逻辑运算符。    nJavaScript中选择结构有if和switch。    n循环结构有while、do…while和for。    # **函数****的定义**    n函数就是为了完成程序中的某些特定功能而进行专门定义的一段程序代码。    n函数包括自定义函数和系统函数    n使用函数可以实现特定的功能，在使用函数前必须对函数进行定义，代码放置在 <script><\/script> 标签之间    # **函数****的参数**    n函数参数作用：调用函数时将数据传递给被调函数的方式    nJavaScript中函数参数的特殊性：    n函数声明了参数，调用时也可以不传递参数，这在其他编程语言中是会出现编译错误的    n不管函数声明时有多少个参数，调用函数时可以传递若干个参数值给函数，并且实际传递的参数值还可以在函数内部获得    n在函数被调用时，一个 arguments 对象就会被创建，它只能使用在函数体中，以数组的形式来管理函数的实际参数    # **window** **对象的常用属性及方法**    nwindow 对象处于对象模型的第一层，对于每个打开的窗口系统都会自动将其定义为 window 对象。    #  **文档对象模型概述**    n可以把HTML 文档中的每个成分看成一个节点，所以DOM 的核心操作是查看节点、创建节点、增加节点、删除节点以及替换节点。节点的特点如下:    n整个文档是一个文档节点    n每个HTML 标签是一个元素节点    n包含在HTML 元素中的文本是文本节点    n每个HTML 属性是一个属性节点    n注释属于注释节点    nHTML 文档中的节点彼此间都存在关系，类似一张家族图谱    "}]}}]);